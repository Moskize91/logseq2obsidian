name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Lint with flake8
      run: |
        poetry run flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Format check with black
      run: poetry run black --check src tests

    # - name: Import sort check with isort
    #   run: poetry run isort --check-only src tests

    # 暂时跳过 mypy 检查，等代码完全类型化后再启用
    # - name: Type check with mypy
    #   run: poetry run mypy src

    - name: Test with pytest
      run: poetry run pytest tests/ -v

    - name: Build package
      run: poetry build

    - name: Test CLI installation
      run: |
        poetry install
        poetry run logseq2obsidian --help